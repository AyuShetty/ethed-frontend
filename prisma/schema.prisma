generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  emailVerified Boolean  @default(false)
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  sessions      Session[]
  accounts      Account[]
  wallets       WalletAddress[]
  courses       Course[]
  purchases     Purchase[]
  payments      Payment[]
  pet           Pet?

  role          String?
  banned        Boolean? @default(false)
  banReason     String?
  banExpires    DateTime?

  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user           User @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@map("session")
}

model Account {
  id                    String   @id @default(uuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model WalletAddress {
  id        String   @id @default(uuid())
  userId    String
  address   String
  chainId   Int
  isPrimary Boolean  @default(false)
  ensName   String?
  ensAvatar String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([address, chainId])
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model Course {
  id          String      @id @default(uuid())
  userId      String
  title       String
  description String
  fileKey     String
  price       Int         // in cents
  duration    Int         // in minutes
  level       CourseLevel
  category    String
  smallDescription String
  slug        String      @unique
  status      CourseStatus @default(DRAFT)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessons    Lesson[]
  purchases  Purchase[]
}

model Lesson {
  id        String   @id @default(uuid())
  courseId  String
  title     String
  content   String
  fileKey   String?
  duration  Int      // in minutes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Purchase {
  id        String         @id @default(uuid())
  userId    String
  courseId  String
  amount    Int            // in cents
  status    PurchaseStatus
  txHash    String?        // Polygon / X402 transaction hash
  paymentId String?        // optional reference to micropayment record
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Payment {
  id          String    @id @default(uuid())
  userId      String
  amount      Int       // in cents
  chainId     Int       // blockchain network ID
  txHash      String
  status      PaymentStatus
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Pet {
  id          String   @id @default(uuid())
  userId      String   @unique
  name        String
  level       Int      @default(1)
  experience  Int      @default(0)
  state       Json     // AI pet state (reinforced environment)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
