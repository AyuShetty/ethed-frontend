generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  name          String?
  email         String?  @unique
  emailVerified Boolean  @default(false)
  image         String?
  role          String?
  banned        Boolean  @default(false)
  banReason     String?
  banExpires    DateTime?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // NextAuth SIWE / OAuth
  sessions      Session[]
  accounts      Account[]

  // Wallets / ENS
  wallets       WalletAddress[]

  // LearningBuddy entities
  pets          Pet[]
  courses       UserCourse[]
  purchases     Purchase[]
  payments      Payment[]
  nfts          NFT[]
}

model Session {
  id          String   @id @default(uuid())
  userId      String
  token       String   @unique
  expiresAt   DateTime
  ipAddress   String?
  userAgent   String?
  impersonatedBy String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String   @id @default(uuid())
  userId                String
  providerId            String
  accountId             String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
}

model WalletAddress {
  id        String   @id @default(uuid())
  userId    String
  address   String
  chainId   Int
  isPrimary Boolean  @default(false)
  ensName   String?
  ensAvatar String?

  createdAt DateTime @default(now())

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([address, chainId])
}

model Pet {
  id          String   @id @default(uuid())
  userId      String
  name        String
  level       Int      @default(1)
  experience  Int      @default(0)
  state       Json     // AI/interaction state
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id          String      @id @default(uuid())
  title       String
  description String?
  price       Int?        // in cents
  level       CourseLevel @default(BEGINNER)
  slug        String      @unique
  status      CourseStatus @default(DRAFT)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())

  lessons     Lesson[]
  users       UserCourse[]
  purchases   Purchase[]
}

model Lesson {
  id        String   @id @default(uuid())
  courseId  String
  title     String
  content   String
  duration  Int?     // minutes
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model UserCourse {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  progress  Int      @default(0) // percent
  completed Boolean  @default(false)
  startedAt DateTime @default(now())
  finishedAt DateTime?

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Purchase {
  id        String         @id @default(uuid())
  userId    String
  courseId  String
  amount    Int            // in cents
  status    PurchaseStatus @default(PENDING)
  txHash    String?        // Polygon / x402 transaction
  paymentId String?        // optional link to Payment
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now())

  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Payment {
  id        String        @id @default(uuid())
  userId    String
  amount    Int           // cents
  chainId   Int
  txHash    String
  type      PaymentType
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NFT {
  id        String   @id @default(uuid())
  userId    String
  tokenId   String
  name      String
  image     String
  metadata  Json?
  createdAt DateTime @default(now())

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentType {
  MICROPAYMENT
  SUBSCRIPTION
}
